#include <Arduino.h>

/*DDRD = B11111110;  // sets Arduino pins 1 to 7 as outputs, pin 0 as input
  DDRD = DDRD | B11111100;  // this is safer as it sets pins 2 to 7 as outputs without changing the value of pins 0 & 1, which are RX & TX
  PORTD = B10101000; // sets digital pins 7,5,3 HIGH
  DDRD - The Port D Data Direction Register - read/write
  PORTD - The Port D Data Register - read/write
  PIND - The Port D Input Pins Register - read only
  Большинство контроллеров Arduino умеют обрабатывать до двух внешних прерываний, пронумерованных так: 0 (на цифровом порту 2) и 1 (на цифровом порту 3).
  Arduino Mega обрабатывает дополнительно еще четыра прерывания: 2 (порт 21), 3 (порт 20), 4 (порт 19) и 5 (порт 18).


*/

/*
  Тестовая геометрия
  размер сектора  128 байт
  секторов        2
  дорожек         4
  итого 1024 байта
*/

/*
  Пакет содержит 8 бит
  0 Синхро, каждое изменение на 1 это новый пакет на шине
  1 Комманда
  2 Комманда
  3 Комманда
  4 Данные
  5 Данные
  6 Данные
  7 Данные

  Комманды:

  00  000 Чтение  READ    ;36: Read a sector
  01  001 Домой   HOME    ;21: Move disc head to track 0
  02  010 Выбор   SELDSK  ;24: Select disc drive
  03  011 Сектор  SETSEC  ;30: Set sector number
  04  100 Трек    SETTRK  ;27: Set track number
  05  101
  06  110
  07  111 Запись  WRITE   ;39: Write a sector






*/

volatile byte databits;
volatile byte state;
volatile byte command;
volatile byte data4, data4H, data4L, data8;
byte wrPend, byteCount;
bool kostyil;

byte sectorSize = 128;
byte sectors = 4;
byte tracks = 2;
const long int diskSize = 1024; //sectors * tracks * sectorSize;

byte curSector = 0;
byte curTrack = 0;
byte curDrive = 0;

byte sector[128];

byte disk[diskSize] = {
    0x80,
    0xA8,
    0x80,
    0xA9,
    0x14,
    0x00,
    0x00,
    0x01,
    0x01,
    0x01,
    0x03,
    0x01,
    0x05,
    0x00,
    0x50,
    0x00,
    0x28,
    0x00,
    0x04,
    0x0F,
    0x00,
    0x85,
    0x01,
    0x7F,
    0x00,
    0xC0,
    0x00,
    0x20,
    0x00,
    0x04,
    0x00,
    0x4B,
    0xC3,
    0x23,
    0x88,
    0x21,
    0x00,
    0x88,
    0xE5,
    0x06,
    0x1F,
    0x3E,
    0x66,
    0x86,
    0x23,
    0x10,
    0xFC,
    0xBE,
    0xE1,
    0x20,
    0x4A,
    0x7B,
    0x32,
    0xB3,
    0x88,
    0x3A,
    0x04,
    0x88,
    0x47,
    0x11,
    0x0C,
    0x88,
    0x2A,
    0x00,
    0x88,
    0xEB,
    0xAF,
    0x3C,
    0xD3,
    0x82,
    0xEB,
    0xCD,
    0x86,
    0x88,
    0x20,
    0x31,
    0x05,
    0x28,
    0x2A,
    0xEB,
    0xDB,
    0x82,
    0xBE,
    0x38,
    0xEE,
    0x3A,
    0x0B,
    0x88,
    0xB7,
    0x28,
    0x17,
    0x3A,
    0xB3,
    0x88,
    0xCB,
    0x67,
    0x20,
    0x09,
    0xCB,
    0xE7,
    0x32,
    0xB3,
    0x88,
    0xD3,
    0x85,
    0x18,
    0xD7,
    0xCB,
    0xA7,
    0x32,
    0xB3,
    0x88,
    0xD3,
    0x85,
    0x3E,
    0x58,
    0xCD,
    0xA2,
    0x88,
    0x18,
    0xC9,
    0x2A,
    0x02,
    0x88,
    0xE9,
    0x3E,
    0x00,
    0xD3,

    0x85,
    0xD3,
    0x00,
    0xC3,
    0x00,
    0x00,
    0x3E,
    0x80,
    0xD3,
    0x80,
    0xCD,
    0xAD,
    0x88,
    0x0E,
    0x83,
    0xCD,
    0x97,
    0x88,
    0xDB,
    0x80,
    0xE6,
    0x1D,
    0xC9,
    0xDB,
    0x80,
    0x0F,
    0xD0,
    0x0F,
    0x30,
    0xF9,
    0xED,
    0xA2,
    0x18,
    0xF5,
    0xD3,
    0x80,
    0xCD,
    0xAD,
    0x88,
    0xDB,
    0x80,
    0x0F,
    0xD0,
    0x18,
    0xFA,
    0xAF,
    0x3D,
    0x00,
    0x20,
    0xFC,
    0xC9,
    0x00,
    0x32,
    0xB3,
    0x88,
    0x3A,
    0x04,
    0x88,
    0x47,
    0x11,
    0x0C,
    0x88,
    0x2A,
    0x00,
    0x88,
    0xEB,
    0xAF,
    0x3C,
    0xD3,
    0x82,
    0xEB,
    0xCD,
    0x86,
    0x88,
    0x20,
    0x31,
    0x05,
    0x28,
    0x2A,
    0xEB,
    0xDB,
    0x82,
    0xBE,
    0x38,
    0xEE,
    0x3A,
    0x0B,
    0x88,
    0xB7,
    0x28,
    0x17,
    0x3A,
    0xB3,
    0x88,
    0xCB,
    0x67,
    0x20,
    0x09,
    0xCB,
    0xE7,
    0x32,
    0xB3,
    0x88,
    0xD3,
    0x85,
    0x18,
    0xD7,
    0xCB,
    0xA7,
    0x32,
    0xB3,
    0x88,
    0xD3,
    0x85,
    0x3E,
    0x58,
    0xCD,
    0xA2,
    0x88,
    0x18,
    0xC9,
    0x2A,
    0x02,
    0x88,
    0xE9,
    0x3E,
    0x00,
    0xD3,

    0xF3,
    0x31,
    0x80,
    0xA9,
    0x18,
    0x07,
    0xF5,
    0xAF,
    0x3D,
    0x20,
    0xFD,
    0xF1,
    0xC9,
    0x3E,
    0x03,
    0xD3,
    0x00,
    0x01,
    0xFD,
    0x80,
    0x3E,
    0x84,
    0xED,
    0x79,
    0x21,
    0x00,
    0xF8,
    0x01,
    0xFD,
    0x7F,
    0x3E,
    0x1F,
    0xED,
    0x79,
    0x77,
    0x3E,
    0x19,
    0xED,
    0x79,
    0x77,
    0x3E,
    0x1F,
    0xED,
    0x79,
    0xBE,
    0x3E,
    0x04,
    0x28,
    0x01,
    0xAF,
    0x32,
    0x31,
    0xEF,
    0x3E,
    0xC3,
    0x32,
    0x38,
    0x00,
    0x21,
    0x86,
    0xA9,
    0x22,
    0x39,
    0x00,
    0xED,
    0x56,
    0x3E,
    0x01,
    0xD3,
    0xFE,
    0x21,
    0x20,
    0xAA,
    0xCD,
    0xEA,
    0xA9,
    0x21,
    0x40,
    0xAA,
    0xCD,
    0xEA,
    0xA9,
    0x21,
    0x30,
    0xAA,
    0xCD,
    0xEA,
    0xA9,
    0x21,
    0x60,
    0xAA,
    0x7E,
    0xB7,
    0x28,
    0x08,
    0x11,
    0x87,
    0xAA,
    0x01,
    0x20,
    0x00,
    0xED,
    0xB0,
    0xC3,
    0x00,
    0xDB,
    0x7E,
    0xB7,
    0xC8,
    0x4F,
    0xCD,
    0x0C,
    0xDB,
    0x23,
    0x18,
    0xF6,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,

    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1B,
    0x81,
    0x82,
    0x1B,
    0x42,
    0x01,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1B,
    0x96,
    0x80,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x51,
    0x75,
    0x6F,
    0x72,
    0x75,
    0x6D,
    0x20,
    0x43,
    0x50,
    0x2F,
    0x4D,
    0x2D,
    0x38,
    0x30,
    0x20,
    0x32,
    0x2E,
    0x32,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,

    0xC3,
    0x9D,
    0xAD,
    0xC3,
    0x99,
    0xAD,
    0x7F,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,

    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x8B,
    0xAA,
    0x8B,
    0xAA,
    0x5F,
    0x0E,
    0x02,
    0xC3,
    0x05,
    0x00,
    0xC5,
    0xCD,
    0x0C,
    0xAB,
    0xC1,
    0xC9,
    0x3E,
    0x0D,
    0xCD,
    0x12,
    0xAB,
    0x3E,
    0x0A,
    0x18,
    0xF1,
    0x3E,
    0x20,
    0x18,
    0xED,
    0xC5,
    0xCD,
    0x18,
    0xAB,
    0xE1,
    0x7E,
    0xB7,
    0xC8,
    0x23,
    0xE5,
    0xCD,
    0x0C,
    0xAB,
    0xE1,
    0x18,
    0xF5,
    0x0E,
    0x0D,
    0xC3,
    0x05,
    0x00,
    0x5F,
    0x0E,
    0x0E,
    0xC3,
    0x05,
    0x00,
    0xCD,
    0x05,
    0x00,
    0x32,
    0x18,
    0xB2,
    0x3C,
    0xC9,
    0x0E,
    0x0F,
    0x18,
    0xF4,
    0xAF,
    0x32,
    0x17,
    0xB2,
    0x11,
    0xF7,
    0xB1,
    0x18,
    0xF3,
    0x0E,
    0x10,
    0x18,
    0xE7,
    0x0E,
    0x11,
    0x18,
    0xE3,
    0x0E,
    0x12,
    0x18,
    0xDF,
    0x11,
    0xF7,
    0xB1,
    0x18,
    0xF3,
    0x0E,
    0x13,
    0xC3,
    0x05,
    0x00,
    0xCD,
    0x05,
    0x00,
    0xB7,
    0xC9,
    0x0E,
    0x14,
    0x18,
    0xF7,
    0x11,
    0xF7,
    0xB1,
    0x18,
    0xF7,
    0x0E,
    0x15,
    0x18,
    0xEE,
    0x0E,
    0x16,
    0x18,

    0xBF,
    0x0E,
    0x17,
    0xC3,
    0x05,
    0x00,
    0x1E,
    0xFF,
    0x0E,
    0x20,
    0xC3,
    0x05,
    0x00,
    0xCD,
    0x86,
    0xAB,
    0x87,
    0x87,
    0x87,
    0x87,
    0x21,
    0x19,
    0xB2,
    0xB6,
    0x32,
    0x04,
    0x00,
    0xC9,
    0x3A,
    0x19,
    0xB2,
    0x18,
    0xF7,
    0xFE,
    0x61,
    0xD8,
    0xFE,
    0x7B,
    0xD0,
    0xE6,
    0x5F,
    0xC9,
    0x3A,
    0xD5,
    0xB1,
    0xB7,
    0x28,
    0x52,
    0x3A,
    0x19,
    0xB2,
    0xB7,
    0x3E,
    0x00,
    0xC4,
    0x3A,
    0xAB,
    0x11,
    0xD6,
    0xB1,
    0xCD,
    0x48,
    0xAB,
    0x28,
    0x41,
    0x3A,
    0xE5,
    0xB1,
    0x3D,
    0x32,
    0xF6,
    0xB1,
    0x11,
    0xD6,
    0xB1,
    0xCD,
    0x70,
    0xAB,
    0x20,
    0x32,
    0x11,
    0x87,
    0xAA,
    0x21,
    0x80,
    0x00,
    0x06,
    0x80,
    0xCD,
    0x7B,
    0xAE,
    0x21,
    0xE4,
    0xB1,
    0x36,
    0x00,
    0x23,
    0x35,
    0x11,
    0xD6,
    0xB1,
    0xCD,
    0x55,
    0xAB,
    0x28,
    0x18,
    0x3A,
    0x19,
    0xB2,
    0xB7,
    0xC4,
    0x3A,
    0xAB,
    0x21,
    0x88,
    0xAA,
    0xCD,
    0x2A,
    0xAB,
    0xCD,
    0x2C,
    0xAC,
    0x28,
    0x17,
    0xCD,
    0x47,
    0xAC,
    0xC3,

    0xC2,
    0xAD,
    0xCD,
    0x47,
    0xAC,
    0xCD,
    0x8D,
    0xAB,
    0x0E,
    0x0A,
    0x11,
    0x86,
    0xAA,
    0xCD,
    0x05,
    0x00,
    0xCD,
    0x9C,
    0xAB,
    0x21,
    0x87,
    0xAA,
    0x46,
    0x23,
    0x78,
    0xB7,
    0x28,
    0x08,
    0x7E,
    0xCD,
    0xA1,
    0xAB,
    0x77,
    0x05,
    0x18,
    0xF3,
    0x77,
    0x21,
    0x88,
    0xAA,
    0x22,
    0x08,
    0xAB,
    0xC9,
    0x0E,
    0x0B,
    0xCD,
    0x05,
    0x00,
    0xB7,
    0xC8,
    0x0E,
    0x01,
    0xCD,
    0x05,
    0x00,
    0xB7,
    0xC9,
    0x0E,
    0x19,
    0xC3,
    0x05,
    0x00,
    0x11,
    0x80,
    0x00,
    0x0E,
    0x1A,
    0xC3,
    0x05,
    0x00,
    0x21,
    0xD5,
    0xB1,
    0x7E,
    0xB7,
    0xC8,
    0x36,
    0x00,
    0xAF,
    0xCD,
    0x3A,
    0xAB,
    0x11,
    0xD6,
    0xB1,
    0xCD,
    0x66,
    0xAB,
    0x3A,
    0x19,
    0xB2,
    0xC3,
    0x3A,
    0xAB,
    0x11,
    0x70,
    0xAD,
    0x21,
    0x2A,
    0xB2,
    0x06,
    0x06,
    0x1A,
    0xBE,
    0xC2,
    0x0F,
    0xAE,
    0x13,
    0x23,
    0x10,
    0xF7,
    0xC9,
    0xCD,
    0x18,
    0xAB,
    0x2A,
    0x0A,
    0xAB,
    0x7E,
    0xFE,
    0x20,
    0x28,
    0x0B,
    0xB7,
    0x28,
    0x08,
    0xE5,
};

void getData()
{

  DDRB = B00000000;
  DDRD = B00000001;

  if (kostyil)
  {
    kostyil = false;
    return;
  }

  Serial.print("*");


  byte portb = PINB;
  portb = portb << 2;

  byte portd = PIND;
  portd = portd >> 3;

  databits = portb | portd;

  command = (databits & B00001110) >> 1;
  data4 = (databits & B11110000) >> 4;

  Serial.print("command:");
  Serial.print(command);
  Serial.print("     data4:");
  Serial.println(data4, HEX);

  if (state == 1)
  {
    data4H = data4;
    state = 2;
  }
  if (state == 0)
  {
    data4L = data4;
    state = 1;
  }
}

//**********************************************************************************************

void putData(byte dataSend, byte commandSend)
{

  byte highPart, lowPart;

  highPart = dataSend & B11110000;
  lowPart = (dataSend & B00001111) << 4;
  commandSend = commandSend << 1;
  highPart = highPart | commandSend;
  lowPart = lowPart | commandSend;

  byte PD = lowPart << 4;
  byte PB = lowPart >> 2;

  ;
  delay(1);

  PORTD = 0; //очищаем порт
  PORTB = 0;

  //******************* RIGHT *****************************
  PORTD = PD;                // 0,1 bits
  PORTB = PB;                // 2-7 bits
  PORTD = PORTD | B00001000; // Синхрофлаг подняли

  //*******************************************************

  ;
  delay(1);

  PORTB = 0; // Очищаем порт
  PORTD = 0;

  //********************** LEFT ***************************
  PD = highPart << 4;
  PB = highPart >> 2;

  PORTD = PD;                // 0,1 bits
  PORTB = PB;                // 2-7 bits
  PORTD = PORTD | B00001000; // Синхрофлаг подняли

  kostyil = true;
}

//****************************************************************************************

void printSector()
{
  int sixteen = 0;
  Serial.println("");
  for (byte q = 0; q < sectorSize; q++)
  {
    if (sector[q] < 0x10)
    {
      Serial.print("0");
    }

    Serial.print(sector[q], HEX);
    Serial.print(" ");
    sixteen++;

    if (sixteen == 16)
    {
      sixteen = 0;
      Serial.println("");
    }
  }
}

void HOME()
{
  Serial.println("");
  Serial.println("Going home.");
  Serial.print("data8:");
  Serial.print(data8, HEX);
  Serial.print("h / ");
  Serial.println(data8);
  curSector = 0;
  curTrack = 0;
}
//****************************************************************************************

void READ()
{

  detachInterrupt(1);


  delay(5);

  long int startByte = curTrack * sectors * sectorSize + sectorSize * curSector;

  //int sixteen = 0;
  Serial.print("TRACK:");
  Serial.print(curTrack);
  Serial.print(" SECTOR:");
  Serial.println(curSector);


  DDRB = B11111111;
  DDRD = B11111101;

  for (byte q = 0; q < sectorSize; q++)
  {
    sector[q] = disk[startByte + q];

    putData(sector[q], 000);
  }
  putData(sector[sectorSize - 1], 000);

  DDRB = B00000000;
  DDRD = B00000001;

    delay(5);

  attachInterrupt(1, getData, RISING);

  Serial.println("Read O.K.");
  printSector();
}

//*******************************************************************************

void SETSEC()
{
  curSector = data8;

  Serial.print("curSector:");
  Serial.println(curSector);
}

void SETTRK()
{
  curTrack = data8;
  Serial.print("SETTRK curTrack:");
  Serial.println(curTrack);
}

void SELDSK()
{
  curDrive = data8;
  Serial.print("Drive selected:");
  Serial.println(curDrive);
}

void WRITE()
{

  long int startByte = curTrack * sectors * sectorSize + sectorSize * curSector;

  if (wrPend == false)
  {
    Serial.print("Writting sector:");
    Serial.print(curSector);
    Serial.print(" sector / Track:");
    Serial.println(curTrack);

    disk[startByte] = data8;
    sector[byteCount] = data8;
    wrPend = true;
    byteCount = 0;
    return;
  }

  byteCount++;

  if (byteCount < sectorSize)
  {
    disk[startByte + byteCount] = data8;
    sector[byteCount] = data8;

    if (byteCount == sectorSize - 1)
    {
      wrPend = false;
      printSector();
    }
    return;
  }
}

void empty()
{
}

//*****************************************************************************
void setup()
{

  DDRB = B00000000;
  DDRD = B00000001;


attachInterrupt(1, getData, RISING);

Serial.begin(115200);
  


//kostyil = true;

  Serial.println("Initialisation done.");
}

void loop()
{

  if (state != 0)
  {
    if (state == 2)
    {
      data8 = data4L + data4H * 16;
      state = 0;

      switch (command)
      {
      case 00: //Read a sector
        READ();
        break;
      case 01: //Move disc head to track 0
        HOME();
        break;
      case 02: //Select disc drive
        SELDSK();
        break;
      case 03: //Set sector number
        SETSEC();
        break;

      case 04: //Set track number
        SETTRK();
        break;
      case 05:
        break;
      case 06:
        break;
      case 07: //Write a sector
        WRITE();
        break;
      }
    }
  }
}
